stage("build & push") {
    commit_hash = ""
    parallel dev_container: {
        node("util") {
            git([url: env.REPO_URL, branch: env.BRANCH])
            commitHash = sh(
                returnStdout: true,
                script: "git rev-parse --short HEAD").trim()
            buildAndPushContainer("dev", "x86_64-unknown-linux-gnu")
        }
    },
    prod_container: {
        node("util") {
            git([url: env.REPO_URL, branch: env.BRANCH])
            buildAndPushContainer("prod", "x86_64-unknown-linux-gnu")
        }
    },
    android_armv7_prod_container: {
        node("util") {
            git([url: env.REPO_URL, branch: env.BRANCH])
            buildAndPushContainer("prod", "armv7-linux-androideabi")
        }
    },
    android_armv7_dev_container: {
        node("util") {
            git([url: env.REPO_URL, branch: env.BRANCH])
            buildAndPushContainer("dev", "armv7-linux-androideabi")
        }
    },
    android_x86_64_dev_container: {
        node("util") {
            git([url: env.REPO_URL, branch: env.BRANCH])
            buildAndPushContainer("dev", "x86_64-linux-android")
        }
    },
    android_x86_64_prod_container: {
        node("util") {
            git([url: env.REPO_URL, branch: env.BRANCH])
            buildAndPushContainer("prod", "x86_64-linux-android")
        }
    }
    build(
        job: "ami_build-safe_client_libs_slave",
        parameters:
        [
            [
                $class: "StringParameterValue",
                name: "SAFE_COMMIT_HASH",
                value: commitHash
            ]
        ],
        wait: false)
}

def buildAndPushContainer(type, target) {
    git([url: env.REPO_URL, branch: env.BRANCH])
    withEnv(["SAFE_CLIENT_LIBS_CONTAINER_TYPE=${component}",
             "SAFE_CLIENT_LIBS_CONTAINER_TARGET=${target}"]) {
        sh("make build-container")
        sh("make push-container")
    }
}
